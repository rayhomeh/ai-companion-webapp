// === ai-companion-webapp ===
// Tech Stack: Next.js + Supabase + OpenAI + Stripe
// Features: Auth, Character Chat, Subscription Gate, Basic UI

// /pages/index.js
import Link from 'next/link';
export default function Home() {
  return (
    <main className="flex flex-col items-center justify-center min-h-screen p-6 text-center">
      <h1 className="text-4xl font-bold">The Companion</h1>
      <p className="mt-2 text-lg">Chat with bold, flirty AI characters ðŸ’‹</p>
      <Link href="/characters" className="mt-6 px-4 py-2 bg-pink-600 text-white rounded-xl">Start Chatting</Link>
    </main>
  );
}

// /pages/characters.js
import characters from '../data/characters.json';
import Link from 'next/link';
export default function Characters() {
  return (
    <div className="grid grid-cols-2 gap-4 p-6">
      {characters.map((char) => (
        <Link key={char.id} href={`/chat/${char.id}`} legacyBehavior>
          <a className="bg-white p-4 rounded-xl shadow">
            <img src={char.avatar_url} alt={char.name} className="rounded-full w-20 h-20 mx-auto" />
            <h2 className="mt-2 text-center font-bold">{char.name}</h2>
            <p className="text-sm text-center">{char.tagline}</p>
          </a>
        </Link>
      ))}
    </div>
  );
}

// /pages/chat/[characterId].js
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import characters from '../../data/characters.json';

export default function ChatPage() {
  const router = useRouter();
  const { characterId } = router.query;
  const [character, setCharacter] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');

  useEffect(() => {
    if (characterId) {
      const found = characters.find(c => c.id === characterId);
      setCharacter(found);
    }
  }, [characterId]);

  const sendMessage = async () => {
    if (!input.trim()) return;
    const res = await fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ characterId, input })
    });
    const data = await res.json();
    setMessages(prev => [...prev, { role: 'user', content: input }, { role: 'ai', content: data.reply }]);
    setInput('');
  };

  if (!character) return <p>Loading...</p>;

  return (
    <div className="p-4">
      <div className="flex items-center space-x-4 mb-4">
        <img src={character.avatar_url} alt={character.name} className="w-12 h-12 rounded-full" />
        <h1 className="text-2xl font-bold">{character.name}</h1>
      </div>
      <div className="bg-gray-100 p-4 h-[400px] overflow-y-scroll rounded mb-4">
        {messages.map((m, i) => (
          <div key={i} className={`mb-2 ${m.role === 'user' ? 'text-right' : 'text-left'}`}>
            <p className="inline-block bg-white px-3 py-2 rounded shadow">{m.content}</p>
          </div>
        ))}
      </div>
      <div className="flex space-x-2">
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="flex-1 px-4 py-2 rounded border"
          onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
        />
        <button onClick={sendMessage} className="bg-pink-600 text-white px-4 py-2 rounded">Send</button>
      </div>
    </div>
  );
}

// /pages/api/chat.js
import characters from '../../data/characters.json';
import { OpenAI } from 'openai';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { characterId, input } = req.body;
  if (!characterId || !input) {
    return res.status(400).json({ error: 'Missing characterId or input' });
  }

  const character = characters.find(c => c.id === characterId);
  if (!character) {
    return res.status(404).json({ error: 'Character not found' });
  }

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: character.prompt },
        { role: 'user', content: input }
      ]
    });

    res.status(200).json({ reply: completion.choices[0].message.content });
  } catch (err) {
    res.status(500).json({ error: 'OpenAI request failed' });
  }
}

// /data/characters.json
[
  {
    "id": "zara",
    "name": "Zara",
    "avatar_url": "/avatars/zara.png",
    "tagline": "Bold. Flirty. Unfiltered ðŸ’‹",
    "prompt": "You are Zara, a bold and flirty romantic AI companion. You're cheeky, confident, and love teasing your human partner. You speak in a fun, slightly seductive tone."
  },
  {
    "id": "nyah",
    "name": "Nyah",
    "avatar_url": "/avatars/nyah.png",
    "tagline": "Sweet chaos with a kiss ðŸ˜ˆ",
    "prompt": "You are Nyah, a playful and wild AI partner who mixes affection with chaos. You tease, you flirt, you charm."
  }
]

// .env.local (you must add this file with your actual key)
// OPENAI_API_KEY=sk-...

// Next Steps:
// 1. Connect Stripe for subscriptions
// 2. Add Supabase for user auth and chat history
// 3. Use Clerk or Supabase Auth to secure routes
// 4. Deploy on Vercel
